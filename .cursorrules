# Homelab Repository Cursor Rules

## PR Workflow

For each PR:

### 1. ‚úÖ Ensure all tests are green

Run checks and monitor until complete:
```bash
gh pr checks <PR_NUMBER> --watch
```

### 2. ‚úÖ Check for Codex review (CRITICAL - don't skip!)

**‚ö†Ô∏è IMPORTANT: Codex behavior differs from typical GitHub approvals**

Codex does NOT use GitHub's "Approve" feature. Instead, it leaves comments in two ways:

**A) When there are issues to fix:**
- Posts a main "Codex Review" comment
- Posts actual review issues as REPLIES to that comment (P1/P2/P3 badges)
- You MUST check the replies - the main comment alone doesn't contain details!

**B) When there are no issues:**
- May post: "Codex Review: Didn't find any major issues. Breezy!"
- May react with üëç to the PR instead of commenting
- If you only see the standard "If Codex has suggestions, it will comment" message with no follow-up, that means no issues found

**How to request and check Codex reviews:**

```bash
# Request Codex review
gh pr comment <PR_NUMBER> --body "@codex review"

# Wait 2-3 minutes for review to complete
# (Main comment appears quickly, but review details take longer)
sleep 180

# Method 1: Check via API for review comments
gh api repos/<OWNER>/<REPO>/issues/<PR_NUMBER>/comments \
  --jq '.[] | select(.user.login == "chatgpt-codex-connector") | {created_at: .created_at, body: .body}' \
  | jq -s 'sort_by(.created_at) | reverse | .[0:3]'

# Method 2: Check for inline review comments on code
gh api repos/<OWNER>/<REPO>/pulls/<PR_NUMBER>/comments \
  --jq '.[] | select(.user.login == "chatgpt-codex-connector") | {path: .path, line: .line, body: .body}'

# Method 3: View PR in browser to see comment threads
gh pr view <PR_NUMBER> --web
```

**What to look for:**
- üî¥ **P1 (Critical)**: Must be fixed before merge
- üü° **P2 (Important)**: Should be fixed before merge
- üîµ **P3 (Nice-to-have)**: Optional improvements
- ‚úÖ **"Didn't find any major issues. Breezy!"**: Approved!
- üëç **Reaction on PR**: Approved (no comment needed when clean)

### 3. ‚úÖ Address Codex feedback

When Codex posts review issues:

**CRITICAL: Reply inline to Codex's comment threads**

‚ö†Ô∏è **DO NOT** use `gh pr comment <PR_NUMBER> --body "response"` to respond to Codex feedback!  
This creates a **separate top-level comment** instead of threading your reply under the Codex issue.

**‚úÖ CORRECT METHOD - Reply inline via browser:**

```bash
# Open PR in browser to reply inline
gh pr view <PR_NUMBER> --web

# In the browser:
# 1. Find the Codex comment thread with the P1/P2/P3 badge
# 2. Click the "Reply..." button WITHIN that thread
# 3. Post your response there (not in the main comment box at bottom)
```

**Each inline reply should either:**
- **Accept and fix**: "Fixed in commit abc123 by [description]"
- **Explain why not fixing**: "Not fixing because [specific reason]"

**After posting inline replies and pushing fixes:**

```bash
# Push fixes
git add -A
git commit -m "fix: address Codex feedback - [description]"
git push origin <branch>

# Request re-review (this can be top-level since it's a new request)
gh pr comment <PR_NUMBER> --body "@codex review"

# Wait and check again
sleep 180
gh api repos/<OWNER>/<REPO>/issues/<PR_NUMBER>/comments \
  --jq '.[] | select(.user.login == "chatgpt-codex-connector") | .body' \
  | grep -i "breezy\|didn't find any major issues" || echo "Check for new issues"
```

**Keep iterating until:**
- Codex says "Didn't find any major issues" OR
- Codex reacts with üëç OR  
- Only standard message appears (means no issues found)

### 4. ‚úÖ Notify user for final approval

Once Codex is satisfied and all checks pass:
```bash
# Summarize status
echo "‚úÖ All checks passing"
echo "‚úÖ Codex approved (no issues found)"
echo "Ready to merge!"
```

### 5. ‚úÖ Merge only after user confirmation

Never auto-merge. Always wait for explicit user approval.

---

## Branch Management

**ALWAYS follow this sequence when starting a new PR:**

1. **Start from main:**
   ```bash
   git checkout main
   git pull origin main
   ```

2. **Create new feature branch:**
   ```bash
   git checkout -b <feature-branch-name>
   ```

3. **Verify you're on the right branch:**
   ```bash
   git branch --show-current  # Should show feature-branch-name, NOT main
   ```

4. **When checking PR status, ensure you're monitoring the FEATURE BRANCH:**
   - PR checks run against the feature branch
   - Don't switch to main while debugging PR issues
   - Use `git branch --show-current` if confused

5. **If you accidentally start from wrong branch:**
   - Don't push! Rebase onto main first
   - Or delete branch and start over

**Common Mistakes to Avoid:**
- ‚ùå Creating branch from another unmerged feature branch
- ‚ùå Switching to main while debugging PR checks
- ‚ùå Forgetting to pull latest main before branching
- ‚ùå Working on main branch directly

---

## Deployment Strategy

**Staged Rollout (Preferred for All Changes):**

All Ansible playbooks targeting Raspberry Pis use a staged rollout pattern:

1. **dwight-pi** - catches issues early
2. **jim-pi** - regular worker
3. **michael-pi** - most critical, updated last

**CI/CD Behavior:**
- **PR dry-run**: Checks all 3 Pis simultaneously
- **Main branch apply**: Runs dwight ‚Üí jim ‚Üí michael

**Why:**
- Safer: Issues caught on dwight-pi before affecting workers or master
- Clear: michael-pi updated last as it's most critical
- Fast: Parallel dry-run for quick validation

---

## Quick Reference Commands

```bash
# Check PR status
gh pr checks <PR_NUMBER>
gh pr checks <PR_NUMBER> --watch

# Request Codex review
gh pr comment <PR_NUMBER> --body "@codex review"

# View PR in browser
gh pr view <PR_NUMBER> --web

# Check if you're on the right branch
git branch --show-current

# Start new PR from main
git checkout main && git pull origin main && git checkout -b feat/my-feature
```

