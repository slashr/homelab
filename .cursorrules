# Homelab Repository Cursor Rules

## PR Workflow

For each PR:

### 1. ‚úÖ Ensure all tests are green

Run checks and monitor until complete:
```bash
gh pr checks <PR_NUMBER> --watch
```

### 2. ‚úÖ Check for Codex review (CRITICAL - don't skip!)

**‚ö†Ô∏è IMPORTANT: Understanding Codex Review Structure**

Codex posts reviews in TWO separate places:

#### A) Initial Review with Issues (if problems found)

**1. Template Comment (Main Thread)**
Codex posts a top-level comment:
```
üí° Codex Review

Here are some automated review suggestions for this pull request.

‚ñ∂ üìñ About Codex in GitHub
```
This is just a **template header** - it contains NO actual feedback!

**2. Inline Code Comments (The Actual Review)**
The REAL review feedback appears as **inline comments on specific lines** in your code with P1/P2/P3 badges:
- üî¥ **P1 (Critical)**: Must be fixed before merge
- üü° **P2 (Important)**: Should be fixed before merge
- üîµ **P3 (Nice-to-have)**: Optional improvements

**How to find inline review comments:**
```bash
# Get all inline code review comments from Codex
gh api repos/slashr/homelab/pulls/<PR_NUMBER>/comments \
  --jq '.[] | select(.user.login == "chatgpt-codex-connector") | 
    {
      id: .id,
      path: .path, 
      line: .line, 
      body: .body,
      created: .created_at
    }'
```

**CRITICAL**: Always check for inline comments! The main thread comment alone is meaningless.

#### B) Approval Comment (when no issues or after fixes)

After you fix issues and request re-review, Codex posts a **NEW separate main comment** (NOT a reply) saying:
- "Codex Review: Didn't find any major issues. Breezy!"
- "Codex Review: Didn't find any major issues. Keep them coming!"
- "Codex Review: Didn't find any major issues. More of your lovely PRs please."
- Or similar variations

**How to check for approval:**
```bash
# Get recent main-thread comments from Codex
gh api repos/slashr/homelab/issues/<PR_NUMBER>/comments \
  --jq '.[] | select(.user.login == "chatgpt-codex-connector") | 
    {
      created_at: .created_at, 
      body: (.body | split("\n") | .[0:3] | join(" "))
    }' \
  | jq -s 'sort_by(.created_at) | reverse | .[0:2]'

# Look for "Didn't find any major issues" in recent comments
gh pr view <PR_NUMBER> --json comments \
  --jq '.comments[] | select(.author.login == "chatgpt-codex-connector") | 
    select(.createdAt > (now - 600 | todate)) | 
    {created: .createdAt, preview: (.body | split("\n") | .[0])}' \
  | grep -i "didn't find any major issues"
```

#### C) Complete Review Check Command

```bash
# Step 1: Request Codex review
gh pr comment <PR_NUMBER> --body "@codex review"

# Step 2: Wait for Codex to complete review (3 minutes)
echo "Waiting for Codex review..." && sleep 180

# Step 3: Check for RECENT inline review comments (last 10 minutes only)
echo "=== Checking for inline code review comments ===" 
RECENT_INLINE=$(gh api repos/slashr/homelab/pulls/<PR_NUMBER>/comments \
  --jq '[.[] | select(.user.login == "chatgpt-codex-connector") | 
    select(.created_at > (now - 600 | todate))] | length')

if [ "$RECENT_INLINE" -gt 0 ]; then
  echo "‚ö†Ô∏è Found $RECENT_INLINE recent inline review comment(s) from Codex"
  gh api repos/slashr/homelab/pulls/<PR_NUMBER>/comments \
    --jq '.[] | select(.user.login == "chatgpt-codex-connector") | 
      select(.created_at > (now - 600 | todate)) |
      {created: .created_at, path: .path, line: .line, body: (.body | split("\n") | .[0:5] | join(" "))}'
else
  echo "‚úÖ No recent inline comments - checking for approval comment..."
  
  # Step 4: Check for approval in recent main comments
  gh api repos/slashr/homelab/issues/<PR_NUMBER>/comments \
    --jq '.[] | select(.user.login == "chatgpt-codex-connector") | 
      select(.created_at > (now - 600 | todate)) | .body' \
    | grep -i "didn't find any major issues" \
    && echo "‚úÖ Codex approved!" \
    || echo "‚è≥ Waiting for Codex response..."
fi
```

### 3. ‚úÖ Address Codex feedback

When Codex posts inline review comments, you MUST reply directly to each inline comment (not as main thread comments):

#### How to Reply to Inline Comments

**‚ùå WRONG - Don't do this:**
```bash
# This creates spam and loses context
gh pr comment <PR_NUMBER> --body "Fixed the issue in commit abc123"
```

**‚úÖ CORRECT - Reply inline to the specific review comment:**
```bash
# Step 1: Get the comment ID you want to reply to
COMMENT_ID=$(gh api repos/slashr/homelab/pulls/<PR_NUMBER>/comments \
  --jq '.[] | select(.user.login == "chatgpt-codex-connector") | 
    select(.body | contains("keyword from the review")) | .id')

# Step 2: Reply directly to that inline comment
gh api repos/slashr/homelab/pulls/comments/$COMMENT_ID/replies \
  -X POST \
  -f body="Fixed in commit abc123: [specific description of what you changed]"
```

**Response Template:**
Each reply should either:
- **Accept and fix**: "Fixed in commit abc123 by excluding .terraform.lock.hcl from cache paths and keeping it only in cache key for invalidation."
- **Explain why not fixing**: "Not fixing because [specific technical reason with context]."

#### Full Fix and Re-review Workflow

```bash
# Step 1: Reply to EACH inline comment
# (Use the commands above to reply to each comment individually)

# Step 2: Make your fixes
git add -A
git commit -m "fix: address Codex P1 feedback - [description]"
git push origin <branch>

# Step 3: Request re-review
gh pr comment <PR_NUMBER> --body "@codex review"

# Step 4: Wait and check for approval (3 minutes)
echo "Waiting for Codex re-review..." && sleep 180

# Step 5: Check for approval comment
gh pr view <PR_NUMBER> --json comments \
  --jq '.comments[] | select(.author.login == "chatgpt-codex-connector") | 
    {created: .createdAt, body: (.body | split("\n") | .[0:2] | join(" "))}' \
  | tail -3 \
  | grep -i "didn't find any major issues" \
  && echo "‚úÖ Codex approved!" \
  || echo "‚ö†Ô∏è Check for new inline comments or wait longer"
```

**Keep iterating until:**
- ‚úÖ All inline comments are addressed with replies
- ‚úÖ Codex posts approval: "Didn't find any major issues. Breezy!" (or similar)
- ‚úÖ No new inline comments appear

### 4. ‚úÖ Notify user for final approval

Once Codex is satisfied and all checks pass:
```bash
# Verify final status
echo "=== PR Status Summary ==="
echo "PR: #<PR_NUMBER>"
echo ""
echo "Checks:"
gh pr checks <PR_NUMBER> | grep -E "(pass|fail)" | head -15
echo ""
echo "Latest Codex Comment:"
gh pr view <PR_NUMBER> --json comments \
  --jq '.comments[] | select(.author.login == "chatgpt-codex-connector") | .body' \
  | tail -1 | head -2
echo ""
echo "‚úÖ All checks passing"
echo "‚úÖ Codex approved (no issues found)"
echo "‚úÖ Ready to merge!"
```

### 5. ‚úÖ Merge only after user confirmation

Never auto-merge. Always wait for explicit user approval.

---

## Branch Management

**ALWAYS follow this sequence when starting a new PR:**

1. **Start from main:**
   ```bash
   git checkout main
   git pull origin main
   ```

2. **Create new feature branch:**
   ```bash
   git checkout -b <feature-branch-name>
   ```

3. **Verify you're on the right branch:**
   ```bash
   git branch --show-current  # Should show feature-branch-name, NOT main
   ```

4. **When checking PR status, ensure you're monitoring the FEATURE BRANCH:**
   - PR checks run against the feature branch
   - Don't switch to main while debugging PR issues
   - Use `git branch --show-current` if confused

5. **If you accidentally start from wrong branch:**
   - Don't push! Rebase onto main first
   - Or delete branch and start over

**Common Mistakes to Avoid:**
- ‚ùå Creating branch from another unmerged feature branch
- ‚ùå Switching to main while debugging PR checks
- ‚ùå Forgetting to pull latest main before branching
- ‚ùå Working on main branch directly

---

## Deployment Strategy

**Staged Rollout (Preferred for All Changes):**

All Ansible playbooks targeting Raspberry Pis use a staged rollout pattern:

1. **dwight-pi** - catches issues early
2. **jim-pi** - regular worker
3. **michael-pi** - most critical, updated last

**CI/CD Behavior:**
- **PR dry-run**: Checks all 3 Pis simultaneously
- **Main branch apply**: Runs dwight ‚Üí jim ‚Üí michael

**Why:**
- Safer: Issues caught on dwight-pi before affecting workers or master
- Clear: michael-pi updated last as it's most critical
- Fast: Parallel dry-run for quick validation

---

## Quick Reference Commands

```bash
# Check PR status
gh pr checks <PR_NUMBER>
gh pr checks <PR_NUMBER> --watch

# Request Codex review
gh pr comment <PR_NUMBER> --body "@codex review"

# Check for inline review comments (the actual issues)
gh api repos/slashr/homelab/pulls/<PR_NUMBER>/comments \
  --jq '.[] | select(.user.login == "chatgpt-codex-connector") | {path: .path, body: .body}'

# Check for approval comment (main thread)
gh pr view <PR_NUMBER> --json comments \
  --jq '.comments[] | select(.author.login == "chatgpt-codex-connector") | .body' | tail -3

# Reply to inline comment
gh api repos/slashr/homelab/pulls/comments/<COMMENT_ID>/replies \
  -X POST \
  -f body="Fixed in commit abc123: [description]"

# View PR in browser
gh pr view <PR_NUMBER> --web

# Check if you're on the right branch
git branch --show-current

# Start new PR from main
git checkout main && git pull origin main && git checkout -b feat/my-feature
```

---

## Codex Review Pattern Summary (Quick Reference)

### When Codex Finds Issues:
1. **Template comment** appears (ignore this, it's just a header)
2. **Inline code comments** appear with P1/P2/P3 badges ‚Üê THE REAL REVIEW
3. You fix the code and **reply inline to each comment**
4. Request `@codex review` again
5. Codex posts **new main comment**: "Didn't find any major issues..." ‚Üê APPROVAL

### API Endpoints:
- **Inline reviews** (code comments): `GET /repos/{owner}/{repo}/pulls/{pr}/comments`
- **Main thread** (general comments): `GET /repos/{owner}/{repo}/issues/{pr}/comments`
- **Reply to inline**: `POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/replies`

### Key Insight:
Codex uses TWO different comment types for different purposes:
- **Inline (pull request review comments)** = Issues to fix
- **Main thread (issue comments)** = Approval/status updates

Never confuse the two!
