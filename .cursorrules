# Homelab Repository Cursor Rules

## Prerequisites

### Required GitHub CLI Setup

Before using these workflows, ensure GitHub CLI is properly configured:

```bash
# Verify required tools are installed
command -v gh >/dev/null || { echo "Error: gh CLI not installed"; exit 1; }
command -v jq >/dev/null || { echo "Error: jq not installed (brew install jq)"; exit 1; }

# Verify gh is authenticated
gh auth status || gh auth login --scopes "repo,read:org,workflow"

# Required token scopes:
# - repo (full control of private repositories)
# - read:org (read organization data)  
# - workflow (required for gh run rerun)

# Set these once per session (used in all commands below)
export REPO="slashr/homelab"
export CODEX_LOGIN="chatgpt-codex-connector[bot]"
```

**Why these scopes:**
- `repo`: Access PR data, comments, checks
- `read:org`: Read org-level data (if needed)
- `workflow`: **Required** for `gh run rerun` to re-trigger failed checks

### Repository Context

All commands use `--repo "$REPO"` flag to avoid dependency on current directory:
```bash
# Verify you're in the correct repo (optional, commands work from anywhere)
git remote -v | grep "slashr/homelab"
```

### Rate Limiting

GitHub API has rate limits (5,000 requests/hour for authenticated users). If you hit limits:
```bash
# Check rate limit status
gh api rate_limit

# Commands will fail with "API rate limit exceeded" - wait or use pagination carefully
```

---

## PR Workflow

For each PR:

### 1. ‚úÖ Ensure all tests are green

Run checks and monitor until complete:
```bash
gh pr checks <PR_NUMBER> --repo "$REPO" --watch
```

**If checks fail or are flaky:**
```bash
# View failed check details
gh pr checks <PR_NUMBER> --repo "$REPO"

# Find run IDs
gh run list --repo "$REPO" --limit 20

# Re-run failed checks only (requires workflow scope)
gh run rerun <RUN_ID> --repo "$REPO" --failed

# Re-run entire workflow
gh run rerun <RUN_ID> --repo "$REPO"
```

### 2. ‚úÖ Check for Codex review (CRITICAL - don't skip!)

**‚ö†Ô∏è Codex Automatically Reviews New PRs**

- ‚úÖ **Codex starts reviewing automatically when you create a PR**
- ‚ùå **Do NOT request `@codex review` on PR creation** - it's redundant
- ‚úÖ **Only request `@codex review` after pushing fixes** to existing PRs

**‚ö†Ô∏è IMPORTANT: Understanding Codex Review Signals**

Codex provides feedback in THREE ways:

#### A) No Issues Found - Thumbs Up Reaction (INITIAL review only)

When Codex finds no issues on a NEW PR's **FIRST commit**:
- üëç **Adds thumbs up emoji reaction to the PR description** (most common)
- No comment posted
- This is the cleanest approval signal

**‚ö†Ô∏è CRITICAL: Thumbs up is STATIC - it does NOT update after new commits!**
- The üëç reaction stays there even after you push new commits
- Presence of üëç does NOT mean Codex reviewed your latest changes
- **After pushing new commits, you MUST request `@codex review` for re-review**
- For re-reviews, look for approval COMMENT (section C below), NOT thumbs up

**Check for thumbs up (initial review only):**
- Look at PR description box for üëç reaction from `chatgpt-codex-connector[bot]`
- Or via API: `gh api /repos/$REPO/issues/<PR_NUMBER>/reactions`

#### B) Issues Found - Inline Comments

**1. Template Comment (Main Thread)**
Codex posts a top-level comment:
```
üí° Codex Review

Here are some automated review suggestions for this pull request.

‚ñ∂ üìñ About Codex in GitHub
```
This is just a **template header** - it contains NO actual feedback!

**2. Inline Code Comments (The Actual Review)**
The REAL review feedback appears as **inline comments on specific lines** in your code with P1/P2/P3 badges:
- üî¥ **P1 (Critical)**: Must be fixed before merge
- üü° **P2 (Important)**: Should be fixed before merge
- üîµ **P3 (Nice-to-have)**: Optional improvements

**CRITICAL**: Always check for inline comments! The main thread comment alone is meaningless.

#### C) Approval Comment (after fixes)

After you fix issues and request re-review with `@codex review`, Codex posts a **NEW separate main comment** saying:
- "Codex Review: Didn't find any major issues. Breezy!"
- "Codex Review: Didn't find any major issues. Bravo."
- "Codex Review: Didn't find any major issues. Keep them coming!"
- Or similar variations with "Didn't find any major issues"

---

### üåê PRIMARY METHOD: Use Browser to Check Reviews

**‚ö†Ô∏è IMPORTANT: AI should ALWAYS check Codex feedback - never ask the user to check!**

**AI Workflow for checking Codex reviews:**

```bash
# After creating NEW PR: Wait for automatic Codex review (do NOT request @codex review)
# Codex will either:
#   1. Add üëç reaction to PR description (no issues)
#   2. Post inline comments with P1/P2/P3 (issues found)

# Check for thumbs up reaction (approval signal)
# IMPORTANT: Multiple users can react - must verify it's specifically from Codex bot!
# NOTE: gh CLI doesn't interpolate env vars in --jq; pipe to external jq with --arg

# Detailed list (Codex üëç only)
gh api -H "Accept: application/vnd.github+json" \
  "/repos/$REPO/issues/<PR_NUMBER>/reactions" \
| jq --arg COD "$CODEX_LOGIN" -r '
    .[]
    | select(.user.login == $COD and .content == "+1")
    | {user: .user.login, reaction: .content, created: .created_at}
  '

# Quick check: does Codex thumbs up exist?
gh api -H "Accept: application/vnd.github+json" \
  "/repos/$REPO/issues/<PR_NUMBER>/reactions" \
| jq --arg COD "$CODEX_LOGIN" -r '
    [ .[] | select(.user.login == $COD and .content == "+1") ] | length
  '
# Returns: 1 if approved, 0 if not approved

# RECOMMENDED: Use silent API polling (no browser popups)
# Poll for up to 15 minutes before notifying user
# (See "Silent Polling Strategy" section below)

# ONLY open browser if API polling times out or user requests it
gh pr view <PR_NUMBER> --repo "$REPO" --web
# Note: This opens browser in foreground (may disturb user)

# If browser automation available:
# Use for final verification ONLY after timeout, not during polling
# browser_navigate("https://github.com/$REPO/pull/<PR_NUMBER>")
# browser_snapshot()
```

**When to manually request `@codex review`:**
- ‚ùå **NOT on new PR creation** (Codex auto-reviews the first commit automatically)
- ‚úÖ **After pushing ANY new commits** to the PR (thumbs up is static, won't update!)
- ‚úÖ **After pushing fixes** to address Codex feedback
- ‚úÖ **When re-requesting review** after any changes

**Why you must re-review after new commits:**
- The initial üëç reaction does NOT disappear or update
- Codex only auto-reviews the FIRST commit when PR is created
- All subsequent commits require manual `@codex review` request

**What to look for in the browser:**

**üö® Check in this order:**

**For INITIAL PR review (first commit):**

1. **üëç Thumbs up on PR description**
   - Check reactions on the PR description box
   - ‚ö†Ô∏è **CRITICAL**: Browser may show "üëç (2)" - multiple users can react!
   - **Must verify specifically from `chatgpt-codex-connector[bot]`**
   - Hover over thumbs up or use API to see WHO reacted
   - Only Codex bot thumbs up = approval (user thumbs up ‚â† approval)
   - Most common approval signal for new PRs

2. **Inline comments in "Files changed" tab**
   - P1/P2/P3 badges on specific lines = issues found
   - No inline comments + thumbs up = fully approved

**For RE-REVIEW after new commits (after `@codex review` request):**

1. **Latest main comment** (IGNORE old thumbs up - it's static!)
   - Scroll to bottom, check timestamp
   - "Codex Review: Didn't find any major issues. [Breezy/Bravo/etc]"
   - Verify timestamp is AFTER your `@codex review` request
   - üëç thumbs up is still there but irrelevant (it's from initial review)

2. **Inline comments in "Files changed" tab**
   - NEW P1/P2/P3 badges on specific lines = new issues found
   - Old/resolved comments will have "Outdated" label - ignore these

‚úÖ **Approved signals:**
- **Initial PR**: üëç reaction on PR description + zero unresolved Codex review threads
- **After re-review**: Latest main comment says "Didn't find any major issues" + zero unresolved Codex review threads
- ‚ö†Ô∏è **Do NOT rely on thumbs up for re-reviews** - it's static and outdated!

‚ö†Ô∏è **Issues found:**
- **NEW** inline comments with **P1/P2/P3 badges** in Files changed tab
- **Initial PR**: No thumbs up reaction
- Template comment: "üí° Codex Review - Here are some automated review suggestions"

**Why browser is better (for manual verification):**
- ‚úÖ Instantly see all comments visually
- ‚úÖ Inline code comments visible in context
- ‚úÖ Approval messages obvious and clear
- ‚úÖ No complex API/jq parsing needed
- ‚úÖ Can reply directly to inline comments via UI
- ‚úÖ More reliable than API timestamp filtering

### üîï Silent Polling Strategy (RECOMMENDED)

**‚ö†Ô∏è IMPORTANT: Do NOT disturb the user with browser popups during polling!**

When waiting for Codex review:
1. ‚úÖ **Use API-only polling** (no browser windows)
2. ‚úÖ **Poll silently for up to 15 minutes** before notifying user
3. ‚úÖ **Check every 30 seconds** for thumbs up or inline comments
4. ‚ùå **Do NOT open browser** unless timeout or user requests
5. ‚úÖ **Only report final result** to user (approved/issues/timeout)

**Implementation:**
```bash
export REPO="slashr/homelab"
export CODEX_LOGIN="chatgpt-codex-connector[bot]"
PR=<PR_NUMBER>

echo "‚è≥ Silently polling for Codex auto-review on PR #$PR (up to 15 minutes)..."
echo ""

deadline=$((SECONDS+900))  # 15 minutes
approved=0

while [ $SECONDS -lt $deadline ]; do
  # Check for thumbs up (approval signal)
  THUMBS=$(gh api -H "Accept: application/vnd.github+json" \
    "/repos/$REPO/issues/$PR/reactions" 2>/dev/null \
  | jq --arg COD "$CODEX_LOGIN" -r \
    '[ .[] | select(.user.login == $COD and .content == "+1") ] | length' \
    2>/dev/null || echo "0")

  if [ "${THUMBS:-0}" -gt 0 ]; then
    # Get full details for user notification
    THUMBS_DATA=$(gh api -H "Accept: application/vnd.github+json" \
      "/repos/$REPO/issues/$PR/reactions" 2>/dev/null \
    | jq --arg COD "$CODEX_LOGIN" -r \
      '.[] | select(.user.login == $COD and .content == "+1") |
       {user: .user.login, reaction: .content, created: .created_at}')
    
    echo "‚úÖ Codex approved! (thumbs up reaction found)"
    echo ""
    echo "$THUMBS_DATA"
    approved=1
    break
  fi
  
  sleep 30  # Check every 30 seconds
done

if [ $approved -eq 0 ]; then
  echo "‚è±Ô∏è Timeout: No Codex review after 15 minutes"
  echo ""
  echo "You can check manually: gh pr view $PR --repo \"$REPO\" --web"
  echo "Or request review: gh pr comment $PR --repo \"$REPO\" --body \"@codex review\""
fi
```

**When to use browser instead:**
- ‚ö†Ô∏è Only if API polling times out (15 minutes with no response)
- ‚ö†Ô∏è Only if user explicitly asks to check browser
- ‚ö†Ô∏è Only for replying to inline comments (API can't do threaded replies)

---

### 3. ‚úÖ Address Codex feedback

When Codex posts inline review comments, you MUST reply directly to each inline comment (not as main thread comments):

#### How to Reply to Inline Comments

**‚ùå WRONG - Don't do this:**
```bash
# This creates spam and loses context (top-level comment instead of inline reply)
gh pr comment <PR_NUMBER> --repo "$REPO" --body "Fixed the issue in commit abc123"
```

**‚úÖ CORRECT - AI must reply inline to the specific review comment**

**‚ö†Ô∏è IMPORTANT: AI should handle inline replies - never ask user to check or reply!**

**PREFERRED: Browser UI (cross-platform)**
```bash
# Open PR in browser
gh pr view <PR_NUMBER> --repo "$REPO" --web

# Navigate to Files changed tab and reply to specific inline comment
# Or jump directly to a comment:
# https://github.com/$REPO/pull/<PR_NUMBER>#discussion_r<COMMENT_ID>

# If browser automation available (optional):
# browser_navigate("https://github.com/$REPO/pull/<PR_NUMBER>")
# Then: Navigate to "Files changed" ‚Üí Find P1/P2/P3 ‚Üí Click "Reply" ‚Üí Submit
```

**FALLBACK: API (may 404, use browser if it fails)**
```bash
# Attempt API inline reply (often returns 404/422)
gh api --method POST /repos/$REPO/pulls/comments/<COMMENT_ID>/replies \
  -f body="Fixed in commit abc123: [description]"

# If API fails, fall back to browser method above
```

**Response Template:**
Each reply should either:
- **Accept and fix**: "Fixed in commit abc123 by excluding .terraform.lock.hcl from cache paths and keeping it only in cache key for invalidation."
- **Explain why not fixing**: "Not fixing because [specific technical reason with context]."

**‚ùå DON'T use these for inline replies (they create top-level comments):**
```bash
gh pr comment <PR_NUMBER> --repo "$REPO" --body "response"
gh pr review <PR_NUMBER> --repo "$REPO" --comment --body "response"
```

**Note:** Prefer browser for inline replies. API inline reply may work but often returns 404/422.

#### Full Fix and Re-review Workflow

```bash
# Step 1: Make your fixes
git add -A
git commit -m "fix: address Codex P1 feedback - [description]"
git push origin <branch>

# Step 2: Reply to inline comments via browser
gh pr view <PR_NUMBER> --repo "$REPO" --web  # Reply in browser UI

# Step 3: Request re-review
PR="<PR_NUMBER>"
gh pr comment "$PR" --repo "$REPO" --body "@codex review"

# Step 4: Poll for Codex approval (up to 15 minutes, silent API polling)
deadline=$((SECONDS+900))  # 15 minutes timeout

# Helper: Count unresolved Codex review threads via GraphQL
# Paginated, checks ANY comment author (not just first)
unresolved_codex_threads() {
  OWNER="${REPO%/*}"; NAME="${REPO#*/}"
  CURSOR=""
  COUNT=0
  while : ; do
    PAGE=$(gh api graphql \
      -f owner="$OWNER" -f name="$NAME" -F number="$PR" ${CURSOR:+-F cursor="$CURSOR"} \
      -f query='
        query($owner:String!, $name:String!, $number:Int!, $cursor:String) {
          repository(owner:$owner, name:$name) {
            pullRequest(number:$number) {
              reviewThreads(first:100, after:$cursor) {
                pageInfo { hasNextPage endCursor }
                nodes {
                  isResolved
                  comments(first:100) { nodes { author { login } } }
                }
              }
            }
          }
        }' )

    PAGE_COUNT=$(echo "$PAGE" | jq --arg COD "$CODEX_LOGIN" '
      .data.repository.pullRequest.reviewThreads.nodes
      | [ .[]
          | select(.isResolved == false)
          | select(.comments.nodes | any(.author.login == $COD))
        ] | length
    ')
    COUNT=$((COUNT + PAGE_COUNT))

    HAS_NEXT=$(echo "$PAGE" | jq -r '.data.repository.pullRequest.reviewThreads.pageInfo.hasNextPage')
    if [ "$HAS_NEXT" = "true" ]; then
      CURSOR=$(echo "$PAGE" | jq -r '.data.repository.pullRequest.reviewThreads.pageInfo.endCursor')
    else
      break
    fi
  done
  echo "$COUNT"
}

# Helper: Get newest top-level Codex comment (approval signal)
# Uses --paginate to handle >100 comments
latest_codex_main() {
  gh api --paginate "/repos/$REPO/issues/$PR/comments" \
  | jq --arg COD "$CODEX_LOGIN" '
      [ .[] | select(.user.login == $COD) ]
      | sort_by(.created_at) | last
    '
}

approved=0
while [ $SECONDS -lt $deadline ]; do
  UNRES=$(unresolved_codex_threads)
  LATEST=$(latest_codex_main)
  BODY=$(jq -r 'try .body // empty' <<<"$LATEST")
  AT=$(jq -r 'try .created_at // empty' <<<"$LATEST")

  echo "‚Ü™ Unresolved Codex threads: ${UNRES:-0}"
  [ -n "$AT" ] && echo "‚Ü™ Latest Codex comment at: $AT"

  if [ -n "$BODY" ] && [ "${UNRES:-0}" -eq 0 ]; then
    echo "‚úÖ Codex approved! (latest comment present + zero unresolved threads)"
    approved=1
    break
  fi
  sleep 20
done

if [ $approved -ne 1 ]; then
  echo "‚è±Ô∏è Timeout: No Codex review after 15 minutes"
  echo ""
  echo "You can check manually: gh pr view $PR --repo \"$REPO\" --web"
  echo "Or request review: gh pr comment $PR --repo \"$REPO\" --body \"@codex review\""
fi
```

**Keep iterating until:**
- ‚úÖ All inline comment threads marked as Resolved
- ‚úÖ Polling script shows zero unresolved threads
- ‚úÖ Latest Codex main comment exists (approval signal)

### 4. ‚úÖ Notify user for final approval

Once Codex is satisfied and all checks pass:
```bash
# Verify final status
PR="<PR_NUMBER>"
echo "=== PR Status Summary ==="
echo "PR: #$PR"
echo ""
echo "Checks:"
gh pr checks "$PR" --repo "$REPO" | grep -E "(pass|fail)" | head -15
echo ""
echo "Latest Codex Comment:"
gh pr view "$PR" --repo "$REPO" --json comments \
| jq --arg COD "$CODEX_LOGIN" -r '
    .comments
    | map(select(.author.login == $COD))
    | sort_by(.createdAt) | last
    | try (.createdAt + "\n" + .body) // "No Codex main comment"
  ' | tail -1
echo ""
echo "‚úÖ All checks passing"
echo "‚úÖ Codex approved (zero unresolved threads)"
echo "‚úÖ Ready to merge!"
```

### 5. ‚úÖ Merge only after user confirmation

Never auto-merge. Always wait for explicit user approval.

---

## Merge Strategy & Branch Protection

### Merge Method

This repository uses **merge commits** (not squash):
```bash
# When merging via gh CLI
gh pr merge <PR_NUMBER> --repo "$REPO" --merge --delete-branch

# Manual merge
git checkout main
git merge --no-ff <feature-branch>
git push origin main
git branch -d <feature-branch>
git push origin --delete <feature-branch>
```

### Branch Protection Rules

The `main` branch has protection rules:
- ‚úÖ Pull requests required (cannot push directly to main)
- ‚úÖ Status checks must pass before merging
- ‚úÖ No force pushes allowed
- ‚ö†Ô∏è If you get "push declined due to repository rule violations", create a PR instead

### Ready to Merge Checklist

Before merging, verify:
- [ ] All required checks passing (lint, security, tests)
- [ ] Codex approved (zero unresolved Codex review threads)
- [ ] No merge conflicts
- [ ] PR is marked as "Ready for review" (not Draft)
- [ ] User explicitly approved merge

---

## Draft PRs

### When to Use Draft PRs

Use draft status for work-in-progress:
```bash
# Create draft PR
gh pr create --repo "$REPO" --draft --title "WIP: feature name" --body "Work in progress"

# Mark existing PR as ready
gh pr ready <PR_NUMBER> --repo "$REPO"

# Convert back to draft
gh pr ready <PR_NUMBER> --repo "$REPO" --undo
```

### Draft PR Behavior

- ‚ùå Codex reviews not triggered on draft PRs
- ‚ùå Required checks may not run
- ‚úÖ Can push commits without triggering full CI
- ‚úÖ Useful for early feedback or parking incomplete work

**Important:** Mark PR as "Ready for review" before requesting Codex review!

---

## Branch Management

**ALWAYS follow this sequence when starting a new PR:**

1. **Start from main:**
   ```bash
   git checkout main
   git pull origin main
   ```

2. **Create new feature branch:**
   ```bash
   git checkout -b <feature-branch-name>
   ```

3. **Verify you're on the right branch:**
   ```bash
   git branch --show-current  # Should show feature-branch-name, NOT main
   ```

4. **When checking PR status, ensure you're monitoring the FEATURE BRANCH:**
   - PR checks run against the feature branch
   - Don't switch to main while debugging PR issues
   - Use `git branch --show-current` if confused

5. **If you accidentally start from wrong branch:**
   - Don't push! Rebase onto main first
   - Or delete branch and start over

**Common Mistakes to Avoid:**
- ‚ùå Creating branch from another unmerged feature branch
- ‚ùå Switching to main while debugging PR checks
- ‚ùå Forgetting to pull latest main before branching
- ‚ùå Working on main branch directly
- ‚ùå **Continuing to push to an existing PR branch for a NEW task** (most critical!)

### ‚ö†Ô∏è CRITICAL: Always Branch from Main for New Tasks

**When you receive a NEW task or feedback (even if related to a previous PR):**

```bash
# ALWAYS do this:
git checkout main
git pull origin main
git checkout -b <new-task-branch-name>

# DON'T do this:
git checkout <existing-pr-branch>  # ‚ùå WRONG! This updates the old PR
```

**Why this matters:**
- Pushing to an existing PR branch updates THAT PR, not creating a new one
- Keeps PR history clean and each PR focused on one task
- Prevents confusion about which PR contains which changes
- Makes review and rollback easier

**Example:**
```bash
# You're on branch "docs/improve-x" with PR #289 open

# User says: "implement ChatGPT feedback"
# ‚ùå WRONG: Continue on same branch
git add -A && git commit && git push origin docs/improve-x
# This updates PR #289 instead of creating a new PR!

# ‚úÖ CORRECT: Start fresh from main
git checkout main
git pull origin main
git checkout -b docs/implement-chatgpt-feedback
git add -A && git commit && git push origin docs/implement-chatgpt-feedback
gh pr create ...  # This creates PR #290
```

**When to reuse existing branch:**
- Only when fixing issues IN THAT SAME PR (e.g., addressing Codex P1 comments)
- Not when user gives you a new, separate task

---

## Deployment Strategy

**Staged Rollout (Preferred for All Changes):**

All Ansible playbooks targeting Raspberry Pis use a staged rollout pattern:

1. **dwight-pi** - catches issues early
2. **jim-pi** - regular worker
3. **michael-pi** - most critical, updated last

**CI/CD Behavior:**
- **PR dry-run**: Checks all 3 Pis simultaneously
- **Main branch apply**: Runs dwight ‚Üí jim ‚Üí michael

**Why:**
- Safer: Issues caught on dwight-pi before affecting workers or master
- Clear: michael-pi updated last as it's most critical
- Fast: Parallel dry-run for quick validation

---

## Quick Reference Commands

### Essential PR Commands
```bash
# Check PR status
gh pr checks <PR_NUMBER> --repo "$REPO"
gh pr checks <PR_NUMBER> --repo "$REPO" --watch

# Request Codex review
gh pr comment <PR_NUMBER> --repo "$REPO" --body "@codex review"

# View PR in browser (PRIMARY METHOD - easiest for everything!)
gh pr view <PR_NUMBER> --repo "$REPO" --web

# Check if you're on the right branch
git branch --show-current

# Start new PR from main
git checkout main && git pull origin main && git checkout -b feat/my-feature
```

### Browser Tools (if available)
```python
# Navigate to PR
browser_navigate("https://github.com/slashr/homelab/pull/<PR_NUMBER>")

# Scroll to bottom to see comments
browser_evaluate("() => { window.scrollTo(0, document.body.scrollHeight); }")

# Take screenshot to see status
browser_take_screenshot("pr-status.png")
```

### Fallback API Commands (only if browser unavailable)

**‚ö†Ô∏è WARNING: These are complex and error-prone. Browser method is STRONGLY preferred.**

```bash
# Check for recent inline review comments (last 10 minutes)
# Note: gh api doesn't support --arg, must pipe through external jq
# NO time filter to avoid false approvals  
gh api repos/slashr/homelab/pulls/<PR_NUMBER>/comments | \
  jq '[.[] | select(.user.login == "chatgpt-codex-connector[bot]")] | length'

# Get MOST RECENT comment from Codex (not just any old "didn't find" message!)
gh api repos/slashr/homelab/issues/<PR_NUMBER>/comments | \
  jq '[.[] | select(.user.login == "chatgpt-codex-connector[bot]")] | 
    sort_by(.created_at) | reverse | .[0] | .body' | \
  head -20
  
# CRITICAL: Don't grep for "didn't find" - READ the actual latest comment!
```

---

## Codex Review Pattern Summary (Quick Reference)

### When Codex Finds Issues:
1. **Template comment** appears (ignore this, it's just a header)
2. **Inline code comments** appear with P1/P2/P3 badges ‚Üê THE REAL REVIEW
3. You fix the code and **reply inline to each comment**
4. Request `@codex review` again
5. Codex posts **new main comment**: "Didn't find any major issues..." ‚Üê APPROVAL

### API Endpoints:
- **Inline reviews** (code comments): `GET /repos/{owner}/{repo}/pulls/{pr}/comments`
- **Main thread** (general comments): `GET /repos/{owner}/{repo}/issues/{pr}/comments`
- **Reply to inline**: `POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/replies`

### Key Insight:
Codex uses TWO different comment types for different purposes:
- **Inline (pull request review comments)** = Issues to fix
- **Main thread (issue comments)** = Approval/status updates

Never confuse the two!

### ‚ö†Ô∏è Common Mistakes That Lead to False Approvals:

**‚ùå MISTAKE: Grepping for "didn't find any major issues" without checking timestamps**
- This finds OLD approval messages from previous review cycles
- You think it's approved when Codex just left a NEW P1 issue 2 minutes ago!

**‚úÖ CORRECT: Always check the MOST RECENT comment**
- Look at timestamp: "2 minutes ago" vs "15 minutes ago"  
- Read the LATEST comment, don't search for approval phrases
- If using API, sort by `created_at` and take `.[0]` (most recent)

**‚ùå MISTAKE: Using `gh api --arg` (not supported)**
- `gh api` only supports `--jq`, not `--arg`
- Must pipe through external `jq` for variables

**‚úÖ CORRECT: Pipe through external jq**
```bash
gh api repos/.../comments | jq --arg cutoff "$CUTOFF" '...'
```
