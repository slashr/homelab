# Homelab Repository Cursor Rules

## Prerequisites

### Required GitHub CLI Setup

Before using these workflows, ensure GitHub CLI is properly configured:

```bash
# Verify gh is installed and authenticated
gh auth status

# Required token scopes:
# - repo (full control of private repositories)
# - read:org (read organization data)
# - workflow (update GitHub Action workflows)

# If not authenticated, run:
gh auth login --scopes "repo,read:org,workflow"
```

### Repository Context

All commands assume you're in the homelab repository directory:
```bash
# Verify you're in the correct repo
git remote -v | grep "slashr/homelab"

# If not, navigate to repo first
cd /Users/akash/Code/personal/homelab
```

### Rate Limiting

GitHub API has rate limits (5,000 requests/hour for authenticated users). If you hit limits:
```bash
# Check rate limit status
gh api rate_limit

# Commands will fail with "API rate limit exceeded" - wait or use pagination carefully
```

---

## PR Workflow

For each PR:

### 1. ‚úÖ Ensure all tests are green

Run checks and monitor until complete:
```bash
gh pr checks <PR_NUMBER> --watch
```

**If checks fail or are flaky:**
```bash
# View failed check details
gh pr checks <PR_NUMBER>

# Re-run failed checks (requires write:org scope)
gh run rerun <RUN_ID> --failed

# Re-run entire workflow
gh run rerun <RUN_ID>

# Find run ID from checks
gh pr checks <PR_NUMBER> --json name,workflowName,detailsUrl \
  | jq '.[] | {name, url: .detailsUrl}'
```

### 2. ‚úÖ Check for Codex review (CRITICAL - don't skip!)

**‚ö†Ô∏è IMPORTANT: Understanding Codex Review Structure**

Codex posts reviews in TWO separate places:

#### A) Initial Review with Issues (if problems found)

**1. Template Comment (Main Thread)**
Codex posts a top-level comment:
```
üí° Codex Review

Here are some automated review suggestions for this pull request.

‚ñ∂ üìñ About Codex in GitHub
```
This is just a **template header** - it contains NO actual feedback!

**2. Inline Code Comments (The Actual Review)**
The REAL review feedback appears as **inline comments on specific lines** in your code with P1/P2/P3 badges:
- üî¥ **P1 (Critical)**: Must be fixed before merge
- üü° **P2 (Important)**: Should be fixed before merge
- üîµ **P3 (Nice-to-have)**: Optional improvements

**CRITICAL**: Always check for inline comments! The main thread comment alone is meaningless.

#### B) Approval Comment (when no issues or after fixes)

After you fix issues and request re-review, Codex posts a **NEW separate main comment** (NOT a reply) saying:
- "Codex Review: Didn't find any major issues. Breezy!"
- "Codex Review: Didn't find any major issues. Bravo."
- "Codex Review: Didn't find any major issues. Keep them coming!"
- "Codex Review: Didn't find any major issues. More of your lovely PRs please."
- Or similar variations with "Didn't find any major issues"

---

### üåê PRIMARY METHOD: Use Browser to Check Reviews

**‚ö†Ô∏è IMPORTANT: AI should ALWAYS check Codex feedback - never ask the user to check!**

**AI Workflow for checking Codex reviews:**

```bash
# Step 1: Request Codex review
gh pr comment <PR_NUMBER> --body "@codex review"

# Step 2: Wait for Codex (3-5 minutes - inline comments take longer than template)
echo "Waiting for Codex review..." && sleep 180

# Step 3: Open PR in browser (MINIMIZED to not disturb user) and check for feedback
open -g -a "Google Chrome" "https://github.com/slashr/homelab/pull/<PR_NUMBER>"
# The -g flag opens Chrome minimized/in background

# Step 4: Use browser automation tools to check for Codex feedback
# (Use Playwright MCP tools if available: browser_navigate, browser_snapshot, browser_take_screenshot)
# Then scroll to bottom and take screenshot to analyze comments
```

**When browser automation is available (preferred):**
```bash
# Navigate to PR (browser opens minimized automatically)
browser_navigate("https://github.com/slashr/homelab/pull/<PR_NUMBER>")

# Take snapshot to check for comments
browser_snapshot()

# Look for latest Codex comments in the snapshot
# Report findings to user
```

**What to look for in the browser:**

**üö® CRITICAL: Always check the MOST RECENT comment with timestamp!**
- Scroll to the very bottom to see the latest comment
- Check the timestamp (e.g., "2 minutes ago")
- **Don't grep for old "didn't find any major issues" - check the actual latest comment!**

‚úÖ **If Codex is happy (MOST RECENT comment):**
- Look for **LATEST** comment from `chatgpt-codex-connector[bot]` saying: "Codex Review: Didn't find any major issues. [Breezy/Bravo/etc]"
- Verify timestamp matches AFTER your re-review request
- No NEW inline code comments with P1/P2/P3 badges

‚ö†Ô∏è **If Codex found issues (check RECENT comments first):**
- **NEW** template comment: "üí° Codex Review - Here are some automated review suggestions" (check timestamp!)
- **NEW** inline comments on specific lines with **P1/P2/P3 badges** (scroll through Files changed tab)
- Each inline comment shows file path, line number, and specific issue
- Old/resolved comments will have "Outdated" label - ignore these!

**Why browser is better:**
- ‚úÖ Instantly see all comments visually
- ‚úÖ Inline code comments visible in context
- ‚úÖ Approval messages obvious and clear
- ‚úÖ No complex API/jq parsing needed
- ‚úÖ Can reply directly to inline comments via UI
- ‚úÖ More reliable than API timestamp filtering

---

### üîß FALLBACK: API Method (for automation/scripting)

**‚ö†Ô∏è Important: Pagination Handling**

GitHub API returns max 30 items per page by default. For PRs with many comments, add `--paginate`:

```bash
gh api --paginate repos/slashr/homelab/issues/<PR_NUMBER>/comments
```

**‚ö†Ô∏è Limitation: API Cannot Filter Resolved Comments**

GitHub's REST API (`pulls/<PR>/comments`) returns ALL inline comments, including resolved and outdated ones. There's no reliable way to filter them via API.

**Recommended: Use Browser Method**

The browser UI clearly shows which comments are "Outdated" - this is the ONLY reliable way to check approval status.

**API Fallback (with caveats):**

```bash
# Get timestamp of latest @codex review request
REVIEW_REQUEST_TIME=$(gh api --paginate repos/slashr/homelab/issues/<PR_NUMBER>/comments \
  --jq '[.[] | select(.user.login != "chatgpt-codex-connector[bot]") | select(.body | contains("@codex review"))] | sort_by(.created_at) | reverse | .[0].created_at')

# Get most recent Codex main comment
LATEST_CODEX=$(gh api --paginate repos/slashr/homelab/issues/<PR_NUMBER>/comments \
  --jq '[.[] | select(.user.login == "chatgpt-codex-connector[bot]")] | sort_by(.created_at) | reverse | .[0]')

CODEX_TIME=$(echo "$LATEST_CODEX" | jq -r '.created_at')
CODEX_BODY=$(echo "$LATEST_CODEX" | jq -r '.body')

# Compare timestamps (Codex comment must be AFTER review request)
if [[ "$CODEX_TIME" > "$REVIEW_REQUEST_TIME" ]]; then
  echo "‚úÖ Codex comment ($CODEX_TIME) is after review request ($REVIEW_REQUEST_TIME)"
  echo ""
  echo "Latest Codex comment:"
  echo "$CODEX_BODY" | head -3
  
  # Check if it looks like approval
  if echo "$CODEX_BODY" | grep -qi "didn't find any major issues\|no major issues"; then
    echo ""
    echo "‚úÖ Likely approved - but verify in browser that inline comments are resolved/outdated"
  else
    echo ""
    echo "‚ùå Does not appear to be approval - check browser for details"
  fi
else
  echo "‚ùå No Codex comment after latest review request"
  echo "   Review requested: $REVIEW_REQUEST_TIME"
  echo "   Latest Codex comment: $CODEX_TIME"
fi
```

**Why This Is Still Imperfect:**

- ‚ùå Cannot detect if inline P1/P2/P3 comments are resolved vs open
- ‚ùå May count outdated comments as still active
- ‚úÖ Does validate timestamp ordering
- ‚úÖ Checks for approval-like language

**For production use: Always verify in browser UI before merging.**

### 3. ‚úÖ Address Codex feedback

When Codex posts inline review comments, you MUST reply directly to each inline comment (not as main thread comments):

#### How to Reply to Inline Comments

**‚ùå WRONG - Don't do this:**
```bash
# This creates spam and loses context
gh pr comment <PR_NUMBER> --body "Fixed the issue in commit abc123"
```

**‚úÖ CORRECT - AI must reply inline to the specific review comment**

**‚ö†Ô∏è IMPORTANT: AI should handle inline replies - never ask user to check or reply!**

**REQUIRED METHOD: Use Browser Automation**
```bash
# Open PR in browser (MINIMIZED to not disturb user)
open -g -a "Google Chrome" "https://github.com/slashr/homelab/pull/<PR_NUMBER>"
# The -g flag opens Chrome minimized/in background

# If browser automation tools available (preferred):
browser_navigate("https://github.com/slashr/homelab/pull/<PR_NUMBER>")
# Then use browser tools to:
# 1. Navigate to "Files changed" tab
# 2. Find the inline comment with P1/P2/P3 badge
# 3. Click "Reply" button directly on that comment
# 4. Type response and submit
```

**Response Template:**
Each reply should either:
- **Accept and fix**: "Fixed in commit abc123 by excluding .terraform.lock.hcl from cache paths and keeping it only in cache key for invalidation."
- **Explain why not fixing**: "Not fixing because [specific technical reason with context]."

**‚ùå NEVER use gh CLI for Codex responses:**
```bash
# This creates a separate top-level comment - DON'T DO THIS!
gh pr comment <PR_NUMBER> --body "response"
gh pr review <PR_NUMBER> --comment --body "response"
```

**Note:** Direct inline replies via API are unreliable (often return 404). Browser automation is the ONLY reliable method.

#### Full Fix and Re-review Workflow

```bash
# Step 1: Make your fixes
git add -A
git commit -m "fix: address Codex P1 feedback - [description]"
git push origin <branch>

# Step 2: Reply to inline comments via browser (preferred) or gh CLI
gh pr view <PR_NUMBER> --web  # Reply in browser UI

# Step 3: Request re-review (this can be top-level since it's a new request)
gh pr comment <PR_NUMBER> --body "@codex review"

# Step 4: Wait and check for approval (3-5 minutes)
echo "Waiting for Codex re-review..." && sleep 180

# Step 5: Check approval in browser
gh pr view <PR_NUMBER> --web
# OR with browser tools:
# browser_navigate("https://github.com/slashr/homelab/pull/<PR_NUMBER>")
# browser_evaluate("() => { window.scrollTo(0, document.body.scrollHeight); }")
# browser_take_screenshot()
# Look for: "Codex Review: Didn't find any major issues. [Breezy/Bravo/etc]"
```

**Keep iterating until:**
- ‚úÖ All inline comments are addressed with replies
- ‚úÖ Codex posts approval: "Didn't find any major issues. Breezy!" (or similar)
- ‚úÖ No new inline comments appear

### 4. ‚úÖ Notify user for final approval

Once Codex is satisfied and all checks pass:
```bash
# Verify final status
echo "=== PR Status Summary ==="
echo "PR: #<PR_NUMBER>"
echo ""
echo "Checks:"
gh pr checks <PR_NUMBER> | grep -E "(pass|fail)" | head -15
echo ""
echo "Latest Codex Comment:"
gh pr view <PR_NUMBER> --json comments \
  --jq '.comments[] | select(.author.login == "chatgpt-codex-connector[bot]") | .body' \
  | tail -1 | head -2
echo ""
echo "‚úÖ All checks passing"
echo "‚úÖ Codex approved (no issues found)"
echo "‚úÖ Ready to merge!"
```

### 5. ‚úÖ Merge only after user confirmation

Never auto-merge. Always wait for explicit user approval.

---

## Merge Strategy & Branch Protection

### Merge Method

This repository uses **merge commits** (not squash):
```bash
# When merging via gh CLI
gh pr merge <PR_NUMBER> --merge --delete-branch

# Manual merge
git checkout main
git merge --no-ff <feature-branch>
git push origin main
git branch -d <feature-branch>
git push origin --delete <feature-branch>
```

### Branch Protection Rules

The `main` branch has protection rules:
- ‚úÖ Pull requests required (cannot push directly to main)
- ‚úÖ Status checks must pass before merging
- ‚úÖ No force pushes allowed
- ‚ö†Ô∏è If you get "push declined due to repository rule violations", create a PR instead

### Ready to Merge Checklist

Before merging, verify:
- [ ] All required checks passing (lint, security, tests)
- [ ] Codex approved (zero unresolved P1/P2/P3 comments)
- [ ] No merge conflicts
- [ ] PR is marked as "Ready for review" (not Draft)
- [ ] User explicitly approved merge

---

## Draft PRs

### When to Use Draft PRs

Use draft status for work-in-progress:
```bash
# Create draft PR
gh pr create --draft --title "WIP: feature name" --body "Work in progress"

# Mark existing PR as ready
gh pr ready <PR_NUMBER>

# Convert back to draft
gh pr ready <PR_NUMBER> --undo
```

### Draft PR Behavior

- ‚ùå Codex reviews not triggered on draft PRs
- ‚ùå Required checks may not run
- ‚úÖ Can push commits without triggering full CI
- ‚úÖ Useful for early feedback or parking incomplete work

**Important:** Mark PR as "Ready for review" before requesting Codex review!

---

## Branch Management

**ALWAYS follow this sequence when starting a new PR:**

1. **Start from main:**
   ```bash
   git checkout main
   git pull origin main
   ```

2. **Create new feature branch:**
   ```bash
   git checkout -b <feature-branch-name>
   ```

3. **Verify you're on the right branch:**
   ```bash
   git branch --show-current  # Should show feature-branch-name, NOT main
   ```

4. **When checking PR status, ensure you're monitoring the FEATURE BRANCH:**
   - PR checks run against the feature branch
   - Don't switch to main while debugging PR issues
   - Use `git branch --show-current` if confused

5. **If you accidentally start from wrong branch:**
   - Don't push! Rebase onto main first
   - Or delete branch and start over

**Common Mistakes to Avoid:**
- ‚ùå Creating branch from another unmerged feature branch
- ‚ùå Switching to main while debugging PR checks
- ‚ùå Forgetting to pull latest main before branching
- ‚ùå Working on main branch directly
- ‚ùå **Continuing to push to an existing PR branch for a NEW task** (most critical!)

### ‚ö†Ô∏è CRITICAL: Always Branch from Main for New Tasks

**When you receive a NEW task or feedback (even if related to a previous PR):**

```bash
# ALWAYS do this:
git checkout main
git pull origin main
git checkout -b <new-task-branch-name>

# DON'T do this:
git checkout <existing-pr-branch>  # ‚ùå WRONG! This updates the old PR
```

**Why this matters:**
- Pushing to an existing PR branch updates THAT PR, not creating a new one
- Keeps PR history clean and each PR focused on one task
- Prevents confusion about which PR contains which changes
- Makes review and rollback easier

**Example:**
```bash
# You're on branch "docs/improve-x" with PR #289 open

# User says: "implement ChatGPT feedback"
# ‚ùå WRONG: Continue on same branch
git add -A && git commit && git push origin docs/improve-x
# This updates PR #289 instead of creating a new PR!

# ‚úÖ CORRECT: Start fresh from main
git checkout main
git pull origin main
git checkout -b docs/implement-chatgpt-feedback
git add -A && git commit && git push origin docs/implement-chatgpt-feedback
gh pr create ...  # This creates PR #290
```

**When to reuse existing branch:**
- Only when fixing issues IN THAT SAME PR (e.g., addressing Codex P1 comments)
- Not when user gives you a new, separate task

---

## Deployment Strategy

**Staged Rollout (Preferred for All Changes):**

All Ansible playbooks targeting Raspberry Pis use a staged rollout pattern:

1. **dwight-pi** - catches issues early
2. **jim-pi** - regular worker
3. **michael-pi** - most critical, updated last

**CI/CD Behavior:**
- **PR dry-run**: Checks all 3 Pis simultaneously
- **Main branch apply**: Runs dwight ‚Üí jim ‚Üí michael

**Why:**
- Safer: Issues caught on dwight-pi before affecting workers or master
- Clear: michael-pi updated last as it's most critical
- Fast: Parallel dry-run for quick validation

---

## Quick Reference Commands

### Essential PR Commands
```bash
# Check PR status
gh pr checks <PR_NUMBER>
gh pr checks <PR_NUMBER> --watch

# Request Codex review
gh pr comment <PR_NUMBER> --body "@codex review"

# View PR in browser (PRIMARY METHOD - easiest for everything!)
gh pr view <PR_NUMBER> --web

# Check if you're on the right branch
git branch --show-current

# Start new PR from main
git checkout main && git pull origin main && git checkout -b feat/my-feature
```

### Browser Tools (if available)
```python
# Navigate to PR
browser_navigate("https://github.com/slashr/homelab/pull/<PR_NUMBER>")

# Scroll to bottom to see comments
browser_evaluate("() => { window.scrollTo(0, document.body.scrollHeight); }")

# Take screenshot to see status
browser_take_screenshot("pr-status.png")
```

### Fallback API Commands (only if browser unavailable)

**‚ö†Ô∏è WARNING: These are complex and error-prone. Browser method is STRONGLY preferred.**

```bash
# Check for recent inline review comments (last 10 minutes)
# Note: gh api doesn't support --arg, must pipe through external jq
# NO time filter to avoid false approvals  
gh api repos/slashr/homelab/pulls/<PR_NUMBER>/comments | \
  jq '[.[] | select(.user.login == "chatgpt-codex-connector[bot]")] | length'

# Get MOST RECENT comment from Codex (not just any old "didn't find" message!)
gh api repos/slashr/homelab/issues/<PR_NUMBER>/comments | \
  jq '[.[] | select(.user.login == "chatgpt-codex-connector[bot]")] | 
    sort_by(.created_at) | reverse | .[0] | .body' | \
  head -20
  
# CRITICAL: Don't grep for "didn't find" - READ the actual latest comment!
```

---

## Codex Review Pattern Summary (Quick Reference)

### When Codex Finds Issues:
1. **Template comment** appears (ignore this, it's just a header)
2. **Inline code comments** appear with P1/P2/P3 badges ‚Üê THE REAL REVIEW
3. You fix the code and **reply inline to each comment**
4. Request `@codex review` again
5. Codex posts **new main comment**: "Didn't find any major issues..." ‚Üê APPROVAL

### API Endpoints:
- **Inline reviews** (code comments): `GET /repos/{owner}/{repo}/pulls/{pr}/comments`
- **Main thread** (general comments): `GET /repos/{owner}/{repo}/issues/{pr}/comments`
- **Reply to inline**: `POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/replies`

### Key Insight:
Codex uses TWO different comment types for different purposes:
- **Inline (pull request review comments)** = Issues to fix
- **Main thread (issue comments)** = Approval/status updates

Never confuse the two!

### ‚ö†Ô∏è Common Mistakes That Lead to False Approvals:

**‚ùå MISTAKE: Grepping for "didn't find any major issues" without checking timestamps**
- This finds OLD approval messages from previous review cycles
- You think it's approved when Codex just left a NEW P1 issue 2 minutes ago!

**‚úÖ CORRECT: Always check the MOST RECENT comment**
- Look at timestamp: "2 minutes ago" vs "15 minutes ago"  
- Read the LATEST comment, don't search for approval phrases
- If using API, sort by `created_at` and take `.[0]` (most recent)

**‚ùå MISTAKE: Using `gh api --arg` (not supported)**
- `gh api` only supports `--jq`, not `--arg`
- Must pipe through external `jq` for variables

**‚úÖ CORRECT: Pipe through external jq**
```bash
gh api repos/.../comments | jq --arg cutoff "$CUTOFF" '...'
```
