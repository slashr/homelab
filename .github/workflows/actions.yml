---
'on':
  push:
    branches: [main, staging]
  pull_request:
    branches: [main]
  workflow_dispatch:  # Allow manual triggering

# Add concurrency control to prevent conflicting deployments
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  gcp-setup:
    name: "Setup GCP Infra"
    if: ${{ github.ref != 'refs/heads/staging' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Add timeout to prevent hanging jobs
    defaults:
      run:
        working-directory: ./gcp
    env:
      GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
      TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: "1.9.6"  # Pin Terraform version

      - name: Cache pip downloads
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('.pre-commit-config.yaml', 'ansible/requirements.yml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install pre-commit
        run: |
          python3 -m pip install --upgrade pip
          pip3 install pre-commit

      - name: Cache pre-commit environments
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run pre-commit
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
          else
            BASE_SHA="${{ github.event.before }}"
          fi
          CHANGED_FILES=$(git diff --name-only --diff-filter=ACM "$BASE_SHA" "${{ github.sha }}")
          if [ -n "$CHANGED_FILES" ]; then
            pre-commit run --files "$CHANGED_FILES" --hook-stage manual
          else
            pre-commit run --hook-stage manual --hook-id terraform_fmt terraform_validate
          fi

      # Add caching for Terraform plugins
      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('gcp/**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color

      # Save plan as artifact for review
      - name: Save Terraform Plan
        uses: actions/upload-artifact@v4
        if: github.event_name == 'pull_request'
        with:
          name: gcp-terraform-plan
          path: ./gcp/terraform.tfplan
          retention-days: 5

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
      - name: Terraform Apply Summary
        if: always()
        run: |
          if [ "${{ steps.apply.outcome }}" = "success" ]; then
            echo "Terraform apply succeeded." >> $GITHUB_STEP_SUMMARY
          else
            echo "Terraform apply failed." >> $GITHUB_STEP_SUMMARY
          fi

  # Extract common SSH setup into a reusable composite action or use OIDC for authentication
  setup-ssh:
    name: "Setup SSH and Tailscale"
    runs-on: ubuntu-latest
    outputs:
      ssh_config: ${{ steps.ssh.outputs.ssh_config }}
    steps:
      - name: Setup SSH
        id: ssh
        shell: bash
        run: |
          eval `ssh-agent -s`
          mkdir -p /home/runner/.ssh/
          echo -e "${{secrets.SSH_AUTH_PRIVATE_KEY}}" > /home/runner/.ssh/id_rsa
          chmod 700 /home/runner/.ssh/id_rsa
          echo -e "Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null\n" > /home/runner/.ssh/config
          echo "ssh_config=done" >> $GITHUB_OUTPUT

      - name: Tailscale
        uses: tailscale/github-action@v3.3.0
        with:
          oauth-client-id: ${{ secrets.TAILSCALE_CLIENT_ID }}
          oauth-secret: ${{ secrets.TAILSCALE_CLIENT_SECRET }}
          tags: tag:k3s

  oracle-setup:
    name: "Setup Oracle Infra"
    if: ${{ github.ref != 'refs/heads/staging' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./oracle
    env:
      TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache
    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Cache pip downloads
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('.pre-commit-config.yaml', 'ansible/requirements.yml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install pre-commit
        run: |
          python3 -m pip install --upgrade pip
          pip3 install pre-commit

      - name: Cache pre-commit environments
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run pre-commit
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
          else
            BASE_SHA="${{ github.event.before }}"
          fi
          CHANGED_FILES=$(git diff --name-only --diff-filter=ACM "$BASE_SHA" "${{ github.sha }}")
          if [ -n "$CHANGED_FILES" ]; then
            pre-commit run --files "$CHANGED_FILES" --hook-stage manual
          else
            pre-commit run --hook-stage manual --hook-id terraform_fmt terraform_validate
          fi

      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('oracle/**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Setup Terraform variables
        id: vars
        run: |-
          cat > terraform.tfvars <<EOF
          user_ocid = "${{ secrets.TF_USER_OCID }}"
          tenancy_ocid = "${{ secrets.TF_TENANCY_OCID }}"
          ssh_authorized_keys = "${{ secrets.TF_SSH_AUTHORIZED_KEYS }}"
          oci_private_key = "${{ secrets.TF_OCI_PRIVATE_KEY }}"
          fingerprint = "${{ secrets.TF_FINGERPRINT }}"
          compartment_id = "${{ secrets.TF_COMPARTMENT_ID }}"
          EOF

      - name: "Terraform Plan"
        id: plan
        run: terraform plan -no-color

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
      - name: Terraform Apply Summary
        if: always()
        run: |
          if [ "${{ steps.apply.outcome }}" = "success" ]; then
            echo "Terraform apply succeeded." >> $GITHUB_STEP_SUMMARY
          else
            echo "Terraform apply failed." >> $GITHUB_STEP_SUMMARY
          fi

  tailscale-setup:
    name: "Setup Tailscale Network"
    needs: [oracle-setup, gcp-setup, setup-ssh]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ansible

    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v5
        with:
          submodules: true
          fetch-depth: 0
      # Setup Tailscale network on the Actions worker
      # Enables connection to k3s nodes using Tailscale public IP
      - name: Tailscale
        uses: tailscale/github-action@v3.3.0
        with:
          oauth-client-id: ${{ secrets.TAILSCALE_CLIENT_ID }}
          oauth-secret: ${{ secrets.TAILSCALE_CLIENT_SECRET }}
          tags: tag:k3s
      - name: Set up Python 3.7.
        uses: actions/setup-python@v6
        with:
          python-version: '3.x'

      - name: Cache pip downloads
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('.pre-commit-config.yaml', 'ansible/requirements.yml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install ansible-lint (lighter)
        run: pip3 install ansible-core ansible-lint
      - uses: actions/cache@v4
        with:
          path: ~/.ansible/collections/ansible_collections
          key: ${{ runner.os }}-ansible-collections-${{ hashFiles('ansible/requirements.yml') }}
          restore-keys: |
            ${{ runner.os }}-ansible-collections-
      - name: Install Ansible collections
        working-directory: ${{ github.workspace }}
        run: ansible-galaxy collection install -r ansible/requirements.yml --force

      - name: Install pre-commit
        run: pip3 install pre-commit

      - name: Cache pre-commit environments
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run pre-commit
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
          else
            BASE_SHA="${{ github.event.before }}"
          fi
          CHANGED_FILES=$(git diff --name-only --diff-filter=ACM "$BASE_SHA" "${{ github.sha }}")
          if [ -n "$CHANGED_FILES" ]; then
            pre-commit run --files "$CHANGED_FILES" --hook-stage manual
          else
            pre-commit run --hook-stage manual --hook-id terraform_fmt terraform_validate
          fi

      - name: Run ansible-lint.
        run: ansible-lint

      - name: Setup SSH
        shell: bash
        run: |
         eval `ssh-agent -s`
         mkdir -p /home/runner/.ssh/
         touch /home/runner/.ssh/id_rsa
         # Create the SSH Private Key used to connect to all the servers using the Secret
         echo -e "${{secrets.SSH_AUTH_PRIVATE_KEY}}" > /home/runner/.ssh/id_rsa
         # Create the Ansible Vault password file for decryption
         echo -e "${{secrets.ANSIBLE_VAULT_PASSWORD}}" > ./vault.pass
         chmod 700 /home/runner/.ssh/id_rsa
         # Disable strict host key checking
         echo -e "Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null\n" > /home/runner/.ssh/config

      - name: Run vpn-playbook
        id: vpn_playbook
        run: |
          ansible-playbook --private-key /home/runner/.ssh/id_rsa -i hosts.ini vpn.yml --vault-password-file ./vault.pass
      - name: vpn-playbook Summary
        if: always()
        run: |
          if [ "${{ steps.vpn_playbook.outcome }}" = "success" ]; then
            echo "vpn-playbook succeeded." >> $GITHUB_STEP_SUMMARY
          else
            echo "vpn-playbook failed." >> $GITHUB_STEP_SUMMARY
          fi

  k3s-setup:
    name: "Setup K3S Cluster"
    needs: [tailscale-setup]
    if: ${{ github.event_name == 'workflow_dispatch' || (github.ref == 'refs/heads/main' && github.event_name == 'push') }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ansible

    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v5
        with:
          submodules: true
          fetch-depth: 0

      # Setup Tailscale network on the Actions worker
      # Enables connection to k3s nodes using Tailscale public IP
      - name: Tailscale
        uses: tailscale/github-action@v3.3.0
        with:
          oauth-client-id: ${{ secrets.TAILSCALE_CLIENT_ID }}
          oauth-secret: ${{ secrets.TAILSCALE_CLIENT_SECRET }}
          tags: tag:k3s
      - name: Set up Python 3.7.
        uses: actions/setup-python@v6
        with:
          python-version: '3.x'

      - name: Cache pip downloads
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('.pre-commit-config.yaml', 'ansible/requirements.yml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install ansible-lint (lighter)
        run: pip3 install ansible-core ansible-lint
      - uses: actions/cache@v4
        with:
          path: ~/.ansible/collections/ansible_collections
          key: ${{ runner.os }}-ansible-collections-${{ hashFiles('ansible/requirements.yml') }}
          restore-keys: |
            ${{ runner.os }}-ansible-collections-
      - name: Install Ansible collections
        working-directory: ${{ github.workspace }}
        run: ansible-galaxy collection install -r ansible/requirements.yml --force

      - name: Install pre-commit
        run: pip3 install pre-commit

      - name: Cache pre-commit environments
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run pre-commit
        run: |
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              BASE_SHA="${{ github.event.pull_request.base.sha }}"
            else
              BASE_SHA="${{ github.event.before }}"
            fi
            CHANGED_FILES=$(git diff --name-only --diff-filter=ACM "$BASE_SHA" "${{ github.sha }}")
            if [ -n "$CHANGED_FILES" ]; then
              pre-commit run --files "$CHANGED_FILES" --hook-stage manual
            else
              pre-commit run --all-files
            fi

      - name: Run ansible-lint.
        run: ansible-lint

      - name: Setup SSH
        shell: bash
        run: |
         eval `ssh-agent -s`
         mkdir -p /home/runner/.ssh/
         touch /home/runner/.ssh/id_rsa
         # Create the SSH Private Key used to connect to all the servers using the Secret
         echo -e "${{secrets.SSH_AUTH_PRIVATE_KEY}}" > /home/runner/.ssh/id_rsa
         # Create the Ansible Vault password file for decryption
         echo -e "${{secrets.ANSIBLE_VAULT_PASSWORD}}" > ./vault.pass
         chmod 700 /home/runner/.ssh/id_rsa
         # Disable strict host key checking
         echo -e "Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null\n" > /home/runner/.ssh/config

      - name: Run k3s-playbook
        id: k3s_playbook
        env:
          TAILSCALE_JOIN_KEY: ${{ secrets.TAILSCALE_JOIN_KEY }}
        run: |
          ansible-playbook --private-key /home/runner/.ssh/id_rsa -i hosts.ini k3s.yml --vault-password-file ./vault.pass
      - name: k3s-playbook Summary
        if: always()
        run: |
          if [ "${{ steps.k3s_playbook.outcome }}" = "success" ]; then
            echo "k3s-playbook succeeded." >> $GITHUB_STEP_SUMMARY
          else
            echo "k3s-playbook failed." >> $GITHUB_STEP_SUMMARY
          fi

  run-k3s:
    name: "Run Kubernetes Cluster"
    needs: [tailscale-setup, k3s-setup]
    if: ${{ github.ref != 'refs/heads/staging' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./kubernetes
    env:
      TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache
    outputs:
      plan_exitcode: ${{ steps.plan.outputs.exitcode }}
      plan_has_changes: ${{ steps.plan.outputs.has_changes }}
    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Cache pip downloads
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('.pre-commit-config.yaml', 'ansible/requirements.yml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install pre-commit
        run: |
          python3 -m pip install --upgrade pip
          pip3 install pre-commit

      - name: Cache pre-commit environments
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run pre-commit
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
          else
            BASE_SHA="${{ github.event.before }}"
          fi
          CHANGED_FILES=$(git diff --name-only --diff-filter=ACM "$BASE_SHA" "${{ github.sha }}")
          if [ -n "$CHANGED_FILES" ]; then
            pre-commit run --files "$CHANGED_FILES" --hook-stage manual
          else
            pre-commit run --hook-stage manual --hook-id terraform_fmt terraform_validate
          fi

      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('kubernetes/**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Setup Terraform variables
        id: vars
        run: |-
          cat > terraform.tfvars <<EOF
          cloudflare_api_token = "${{ secrets.TF_CLOUDFLARE_API_TOKEN }}"
          kube_client_cert = "${{ secrets.TF_KUBE_CLIENT_CERT }}"
          kube_client_key = "${{ secrets.TF_KUBE_CLIENT_KEY }}"
          EOF

      - name: "Terraform Plan"
        id: plan
        run: |
          set -o pipefail
          terraform plan -no-color 2>&1 | tee plan.log
          PLAN_EXIT=${PIPESTATUS[0]}
          echo "exitcode=$PLAN_EXIT" >> $GITHUB_OUTPUT
          if [ "$PLAN_EXIT" -ne 0 ]; then
            exit "$PLAN_EXIT"
          fi

          SUMMARY_LINE=$(grep -E "Plan: [0-9]+ to add, [0-9]+ to change, [0-9]+ to destroy\." plan.log | tail -n1 || true)
          if [ -n "$SUMMARY_LINE" ]; then
            ADD_COUNT=$(echo "$SUMMARY_LINE" | sed -E 's/Plan: ([0-9]+) to add, ([0-9]+) to change, ([0-9]+) to destroy\./\1/')
            CHANGE_COUNT=$(echo "$SUMMARY_LINE" | sed -E 's/Plan: ([0-9]+) to add, ([0-9]+) to change, ([0-9]+) to destroy\./\2/')
            DESTROY_COUNT=$(echo "$SUMMARY_LINE" | sed -E 's/Plan: ([0-9]+) to add, ([0-9]+) to change, ([0-9]+) to destroy\./\3/')
          else
            ADD_COUNT=0
            CHANGE_COUNT=0
            DESTROY_COUNT=0
          fi

          echo "add_count=$ADD_COUNT" >> $GITHUB_OUTPUT
          echo "change_count=$CHANGE_COUNT" >> $GITHUB_OUTPUT
          echo "destroy_count=$DESTROY_COUNT" >> $GITHUB_OUTPUT

          HAS_CHANGES="unknown"
          if [ "$ADD_COUNT" -gt 0 ] || [ "$CHANGE_COUNT" -gt 0 ] || [ "$DESTROY_COUNT" -gt 0 ]; then
            HAS_CHANGES="true"
          elif [ -n "$SUMMARY_LINE" ] || grep -q "No changes. Infrastructure is up-to-date." plan.log; then
            HAS_CHANGES="false"
          fi

          echo "has_changes=$HAS_CHANGES" >> $GITHUB_OUTPUT

      - name: Terraform Plan Outcome
        run: |
          case "${PLAN_HAS_CHANGES}" in
            true)
              echo "Terraform plan detected pending changes." >> $GITHUB_STEP_SUMMARY
              ;;
            false)
              echo "Terraform plan detected no changes." >> $GITHUB_STEP_SUMMARY
              ;;
            *)
              echo "Terraform plan completed but the change summary could not be determined automatically." >> $GITHUB_STEP_SUMMARY
              ;;
          esac
        env:
          PLAN_HAS_CHANGES: ${{ steps.plan.outputs.has_changes }}

      - name: Upload Terraform Plan Artifact
        if: steps.plan.outputs.has_changes != 'false'
        uses: actions/upload-artifact@v4
        with:
          name: run-k3s-plan
          path: plan.log
          retention-days: 5

      - name: Terraform Plan Summary
        if: steps.plan.outputs.exitcode == '0'
        env:
          ADD_COUNT: ${{ steps.plan.outputs.add_count }}
          CHANGE_COUNT: ${{ steps.plan.outputs.change_count }}
          DESTROY_COUNT: ${{ steps.plan.outputs.destroy_count }}
          PLAN_HAS_CHANGES: ${{ steps.plan.outputs.has_changes }}
        run: |
          echo "## Terraform Plan Summary" >> $GITHUB_STEP_SUMMARY
          echo "* Resources to add: ${ADD_COUNT}" >> $GITHUB_STEP_SUMMARY
          echo "* Resources to change: ${CHANGE_COUNT}" >> $GITHUB_STEP_SUMMARY
          echo "* Resources to destroy: ${DESTROY_COUNT}" >> $GITHUB_STEP_SUMMARY
          if [ "${PLAN_HAS_CHANGES}" = "unknown" ]; then
            echo "> Terraform could not automatically determine whether changes are pending. Review the plan details below." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Terraform Plan Details
        if: steps.plan.outputs.exitcode == '0'
        run: |
          {
            echo "## Terraform Plan Details"
            echo '```'
            cat plan.log
            echo '```'
          } >> $GITHUB_STEP_SUMMARY

  run-k3s-apply:
    name: "Apply Kubernetes Cluster"
    needs: run-k3s
    if: >-
      github.ref == 'refs/heads/main' &&
      github.event_name == 'push' &&
      (needs.run-k3s.outputs.plan_has_changes == 'true' ||
       needs.run-k3s.outputs.plan_has_changes == 'unknown')
    runs-on: ubuntu-latest
    environment:
      name: production
    defaults:
      run:
        working-directory: ./kubernetes
    env:
      TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache
    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('kubernetes/**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Setup Terraform variables
        run: |-
          cat > terraform.tfvars <<EOF
          cloudflare_api_token = "${{ secrets.TF_CLOUDFLARE_API_TOKEN }}"
          kube_client_cert = "${{ secrets.TF_KUBE_CLIENT_CERT }}"
          kube_client_key = "${{ secrets.TF_KUBE_CLIENT_KEY }}"
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -input=false

      - name: Terraform Apply Summary
        if: always()
        run: |
          if [ "${{ steps.apply.outcome }}" = "success" ]; then
            echo "Terraform apply succeeded." >> $GITHUB_STEP_SUMMARY
          else
            echo "Terraform apply failed." >> $GITHUB_STEP_SUMMARY
          fi
