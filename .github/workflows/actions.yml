---
'on':
  push:
    branches: [main, staging]
  pull_request:
    branches: [main]
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read
  actions: write

# Add concurrency control to prevent conflicting deployments
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  gcp-setup:
    name: "Terraform GCP"
    if: ${{ github.ref != 'refs/heads/staging' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Add timeout to prevent hanging jobs
    defaults:
      run:
        working-directory: ./gcp
    env:
      GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
      TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: "1.9.6"  # Pin Terraform version

      - name: Setup and Run Pre-commit
        uses: ./.github/actions/setup-precommit

      # Add caching for Terraform plugins
      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('gcp/**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=terraform.tfplan

      # Save plan as artifact for review
      - name: Save Terraform Plan
        uses: actions/upload-artifact@v4
        if: github.event_name == 'pull_request'
        with:
          name: gcp-terraform-plan
          path: ./gcp/terraform.tfplan
          retention-days: 5

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

      - name: Terraform Apply Summary
        if: always()
        run: |
          if [ "${{ steps.apply.outcome }}" = "success" ]; then
            echo "Terraform apply succeeded." >> $GITHUB_STEP_SUMMARY
          else
            echo "Terraform apply failed." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Terraform Plan Summary
        uses: ./.github/actions/terraform-plan-summary
        with:
          plan_file: 'terraform.tfplan'
          job_name: 'GCP'

  oracle-setup:
    name: "Terraform Oracle"
    if: ${{ github.ref != 'refs/heads/staging' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        working-directory: ./oracle
    env:
      TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache
      TF_VAR_user_ocid: ${{ secrets.TF_USER_OCID }}
      TF_VAR_tenancy_ocid: ${{ secrets.TF_TENANCY_OCID }}
      TF_VAR_ssh_authorized_keys: ${{ secrets.TF_SSH_AUTHORIZED_KEYS }}
      TF_VAR_oci_private_key: ${{ secrets.TF_OCI_PRIVATE_KEY }}
      TF_VAR_fingerprint: ${{ secrets.TF_FINGERPRINT }}
      TF_VAR_compartment_id: ${{ secrets.TF_COMPARTMENT_ID }}
    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: "1.9.6"  # Pin Terraform version

      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('oracle/**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Setup and Run Pre-commit
        uses: ./.github/actions/setup-precommit

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: "Terraform Plan"
        id: plan
        run: terraform plan -no-color -out=plan.tfplan

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

      - name: Terraform Apply Summary
        if: always()
        run: |
          if [ "${{ steps.apply.outcome }}" = "success" ]; then
            echo "Terraform apply succeeded." >> $GITHUB_STEP_SUMMARY
          else
            echo "Terraform apply failed." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Terraform Plan Summary
        uses: ./.github/actions/terraform-plan-summary
        with:
          plan_file: 'plan.tfplan'
          job_name: 'Oracle'

  tailscale-setup:
    name: "Ansible Tailscale"
    needs: [oracle-setup, gcp-setup]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        working-directory: ./ansible

    steps:
      - name: Check out the codebase
        uses: actions/checkout@v5
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup Ansible Environment
        uses: ./.github/actions/setup-ansible
        with:
          tailscale_client_id: ${{ secrets.TAILSCALE_CLIENT_ID }}
          tailscale_client_secret: ${{ secrets.TAILSCALE_CLIENT_SECRET }}
          ssh_private_key: ${{ secrets.SSH_AUTH_PRIVATE_KEY }}
          ansible_vault_password: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}

      - name: Run vpn-playbook
        id: vpn_playbook
        run: |
          ansible-playbook --private-key /home/runner/.ssh/id_rsa -i hosts.ini vpn.yml --vault-password-file ./vault.pass

      - name: vpn-playbook Summary
        if: always()
        run: |
          if [ "${{ steps.vpn_playbook.outcome }}" = "success" ]; then
            echo "vpn-playbook succeeded." >> $GITHUB_STEP_SUMMARY
          else
            echo "vpn-playbook failed." >> $GITHUB_STEP_SUMMARY
          fi

  k3s-setup:
    name: "Ansible K3S"
    needs: [tailscale-setup]
    if: ${{ github.event_name == 'workflow_dispatch' || (github.ref == 'refs/heads/main' && github.event_name == 'push') }}
    runs-on: ubuntu-latest
    timeout-minutes: 45
    defaults:
      run:
        working-directory: ./ansible

    steps:
      - name: Check out the codebase
        uses: actions/checkout@v5
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup Ansible Environment
        uses: ./.github/actions/setup-ansible
        with:
          tailscale_client_id: ${{ secrets.TAILSCALE_CLIENT_ID }}
          tailscale_client_secret: ${{ secrets.TAILSCALE_CLIENT_SECRET }}
          ssh_private_key: ${{ secrets.SSH_AUTH_PRIVATE_KEY }}
          ansible_vault_password: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}

      - name: Run k3s-playbook
        id: k3s_playbook
        env:
          TAILSCALE_JOIN_KEY: ${{ secrets.TAILSCALE_JOIN_KEY }}
        run: |
          ansible-playbook --private-key /home/runner/.ssh/id_rsa -i hosts.ini k3s.yml --vault-password-file ./vault.pass

      - name: k3s-playbook Summary
        if: always()
        run: |
          if [ "${{ steps.k3s_playbook.outcome }}" = "success" ]; then
            echo "k3s-playbook succeeded." >> $GITHUB_STEP_SUMMARY
          else
            echo "k3s-playbook failed." >> $GITHUB_STEP_SUMMARY
          fi

  run-k3s:
    name: "Terraform K8S"
    needs: [k3s-setup]
    if: ${{ github.ref != 'refs/heads/staging' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        working-directory: ./kubernetes
    env:
      TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache
      TF_VAR_cloudflare_api_token: ${{ secrets.TF_CLOUDFLARE_API_TOKEN }}
      TF_VAR_kube_client_cert: ${{ secrets.TF_KUBE_CLIENT_CERT }}
      TF_VAR_kube_client_key: ${{ secrets.TF_KUBE_CLIENT_KEY }}
    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: "1.9.6"

      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup and Run Pre-commit
        uses: ./.github/actions/setup-precommit

      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('kubernetes/**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: "Terraform Plan"
        id: plan
        run: terraform plan -no-color -out=plan.tfplan

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

      - name: Terraform Apply Summary
        if: always()
        run: |
          if [ "${{ steps.apply.outcome }}" = "success" ]; then
            echo "Terraform apply succeeded." >> $GITHUB_STEP_SUMMARY
          else
            echo "Terraform apply failed." >> $GITHUB_STEP_SUMMARY
          fi

      # Add drift detection (guarded to post-apply on main) with safe exit-code capture
      - name: Check for Infrastructure Drift
        id: drift_check
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.apply.outcome == 'success'
        run: |
          # plan exit codes: 0=no change, 1=error, 2=changes (drift)
          set +e
          terraform plan -detailed-exitcode -out=drift.tfplan
          code=$?
          set -e
          if [ "$code" -eq 1 ]; then
            echo "Terraform plan encountered an error (exit 1)."
            exit 1
          fi
          echo "drift_exitcode=$code" >> "$GITHUB_OUTPUT"

      - name: Drift Detection Summary
        if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          exitcode="${{ steps.drift_check.outputs.drift_exitcode }}"
          if [ -z "$exitcode" ]; then
            echo "Drift detection did not run (non-main or apply skipped)." >> $GITHUB_STEP_SUMMARY
          elif [ "$exitcode" -eq 0 ]; then
            echo "Drift detection: no changes detected." >> $GITHUB_STEP_SUMMARY
          elif [ "$exitcode" -eq 2 ]; then
            echo "Drift detection: configuration drift detected." >> $GITHUB_STEP_SUMMARY
          else
            echo "Drift detection completed with unexpected exit code: $exitcode" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Terraform Plan Summary
        uses: ./.github/actions/terraform-plan-summary
        with:
          plan_file: 'plan.tfplan'
          job_name: 'Kubernetes'
