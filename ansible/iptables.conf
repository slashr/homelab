*filter
# Allow all outgoing, but drop incoming and forwarding packets by default
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [0:0]

# Custom per-protocol chains
:UDP - [0:0]
:TCP - [0:0]
:ICMP - [0:0]

# Acceptable UDP traffic
# Wireguard port
-A UDP -p udp --dport 51820 -j ACCEPT

# Acceptable TCP traffic
-A TCP -p tcp --dport 22 -j ACCEPT
-A TCP -p tcp --dport 2244 -j ACCEPT
-A TCP -p tcp --dport 80 -j ACCEPT
-A TCP -p tcp --dport 443 -j ACCEPT
-A TCP -p tcp --dport 6443 -j ACCEPT

# Acceptable ICMP traffic

# Boilerplate acceptance policy
-A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
-A INPUT -i lo -j ACCEPT

# Drop invalid packets
-A INPUT -m conntrack --ctstate INVALID -j DROP

# Pass traffic to protocol-specific chains
## Only allow new connections (established and related should already be handled)
## For TCP, additionally only allow new SYN packets since that is the only valid
## method for establishing a new TCP connection
-A INPUT -p udp -m conntrack --ctstate NEW -j UDP
-A INPUT -p tcp --syn -m conntrack --ctstate NEW -j TCP
-A INPUT -p icmp -m conntrack --ctstate NEW -j ICMP

# Allow ICMP Pings from Wireguard VPN network 
-I INPUT 6 -p icmp -s 172.20.0.0/16 -d 172.20.0.0/16 -j ACCEPT

# Reject anything that's fallen through to this point
## Try to be protocol-specific w/ rejection message
-A INPUT -p udp -j REJECT --reject-with icmp-port-unreachable
-A INPUT -p tcp -j REJECT --reject-with tcp-reset
-A INPUT -j REJECT --reject-with icmp-proto-unreachable


# Forward filtering rules
-A FORWARD -i ens3 -o wg0 -p tcp --syn --dport 2244 -m conntrack --ctstate NEW -j ACCEPT
-A FORWARD -i ens3 -o wg0 -p tcp --syn --dport 80 -m conntrack --ctstate NEW -j ACCEPT
-A FORWARD -i ens3 -o wg0 -p tcp --syn --dport 443 -m conntrack --ctstate NEW -j ACCEPT
-A FORWARD -i ens3 -o wg0 -p tcp --syn --dport 6443 -m conntrack --ctstate NEW -j ACCEPT
-A FORWARD -i ens3 -o wg0 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
-A FORWARD -i wg0 -o ens3 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
-A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
-A FORWARD -i wg0 -j ACCEPT
# End of Forward filtering rules

# Commit the changes

COMMIT

*raw
:PREROUTING ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
COMMIT

*nat
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]

# Rules to translate requests for port 80 of the public interface
# so that we can forward correctly to the web server using the
# private interface.

-A PREROUTING -i ens3 -p tcp --dport 2244 -j DNAT --to-destination 172.20.0.2:22
-A PREROUTING -i ens3 -p tcp --dport 80 -j DNAT --to-destination 172.20.0.2
-A PREROUTING -i ens3 -p tcp --dport 443 -j DNAT --to-destination 172.20.0.2
-A PREROUTING -i ens3 -p tcp --dport 6443 -j DNAT --to-destination 172.20.0.2

-A POSTROUTING -o wg0 -p tcp --dport 22 -d 172.20.0.2 -j SNAT --to-source 172.20.0.1
-A POSTROUTING -o wg0 -p tcp --dport 80 -d 172.20.0.2 -j SNAT --to-source 172.20.0.1
-A POSTROUTING -o wg0 -p tcp --dport 443 -d 172.20.0.2 -j SNAT --to-source 172.20.0.1
-A POSTROUTING -o wg0 -p tcp --dport 6443 -d 172.20.0.2 -j SNAT --to-source 172.20.0.1
# End of NAT translations for web server traffic
COMMIT

*security
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
COMMIT

*mangle
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
COMMIT

# Oracle Wireshark details: 

# * Public IP Address: 130.162.50.22
# * Private IP Address: 172.20.0.1
# * Public Interface: ens3
# * Private Interface: wg0

# Pi Wireshark details: 

# * Public IP Address: N/A
# * Private IP Address: 172.20.0.2
# * Public Interface: wlan0
# * Private Interface: wg0

