---
- name: Initialising cluster
  hosts:
    - pi-workers
    - oracle-workers
    - gcp-workers
    - michael-pi
  become: true
  tasks:
    - name: Updating instances
      ansible.builtin.apt:
        update_cache: true
        upgrade: dist

    - name: Downloading k3s script
      ansible.builtin.get_url:
        url: https://get.k3s.io
        dest: /tmp/k3s.sh
        mode: "0755"

- name: Update K3S Master
  hosts: michael-pi
  become: true
  tasks:
    - name: Create /etc/rancher/k3s directory
      ansible.builtin.file:
        path: /etc/rancher/k3s
        state: directory
        mode: '0755'
    - name: Copy over config.yaml
      ansible.builtin.copy:
        src: ./k3s-master-config.yaml
        dest: /etc/rancher/k3s/config.yaml
        mode: '0644'
    - name: Check if k3s is already installed
      ansible.builtin.stat:
        path: /usr/local/bin/k3s
      register: k3s_binary

    - name: Get current k3s version
      ansible.builtin.command: /usr/local/bin/k3s --version
      register: k3s_current_version
      changed_when: false
      failed_when: false
      when: k3s_binary.stat.exists

    - name: Set installed k3s version fact
      ansible.builtin.set_fact:
        k3s_installed_version: "{{ k3s_current_version.stdout.split()[2] }}"
      when: k3s_binary.stat.exists

    - name: Installing k3s
      ansible.builtin.command: >
        /tmp/k3s.sh --vpn-auth="name=tailscale,joinKey=$TAILSCALE_JOIN_KEY"
      environment:
        TAILSCALE_JOIN_KEY: "{{ lookup('env', 'TAILSCALE_JOIN_KEY') }}"
        INSTALL_K3S_VERSION: "{{ k3s_version }}"
      register: k3s_install
      when: not k3s_binary.stat.exists or k3s_installed_version != k3s_version
      failed_when:
        - k3s_install.rc != 0
        - '"already installed" not in k3s_install.stderr'
      changed_when: k3s_install.rc == 0

    - name: Wait for k3s to be ready
      ansible.builtin.wait_for:
        path: /var/lib/rancher/k3s/server/node-token
        timeout: 30
        msg: "Timeout waiting for k3s to generate node token"

    - name: Verify k3s service
      ansible.builtin.systemd:
        name: k3s
        state: started
        enabled: true
      register: k3s_service
      until: k3s_service.status.ActiveState == "active"
      retries: 5
      delay: 5

- name: Get Agent Token
  become: true
  hosts: michael-pi
  tasks:
    - name: Copy agent token
      ansible.builtin.slurp:
        path: /var/lib/rancher/k3s/server/agent-token
      register: agent_token
    - name: Share agent token with every host
      ansible.builtin.set_fact:
        agent_token_fact: "{{ agent_token.content | b64decode | trim }}"
      delegate_to: "{{ item }}"
      delegate_facts: true          # store the fact on the delegated host
      loop: "{{ groups['all'] }}"    # or restrict to the three worker groups


- name: Install Tailscale-K3S on Nodes
  hosts:
    - pi-workers
    - oracle-workers
    - gcp-workers
  become: true
  tasks:
    - name: Check if k3s-agent is already installed
      ansible.builtin.stat:
        path: /usr/local/bin/k3s-agent
      register: k3s_agent_binary

    - name: Get current k3s agent version
      ansible.builtin.command: /usr/local/bin/k3s-agent --version
      register: k3s_agent_current_version
      changed_when: false
      failed_when: false
      when: k3s_agent_binary.stat.exists

    - name: Set installed k3s agent version fact
      ansible.builtin.set_fact:
        k3s_agent_installed_version: >-
          {{ k3s_agent_current_version.stdout.split()[2] }}
      when: k3s_agent_binary.stat.exists

    - name: Installing k3s agent
      ansible.builtin.command: >
        /tmp/k3s.sh --vpn-auth="name=tailscale,joinKey=$TAILSCALE_JOIN_KEY"
      environment:
        TAILSCALE_JOIN_KEY: "{{ lookup('env', 'TAILSCALE_JOIN_KEY') }}"
        K3S_TOKEN: "{{ agent_token_fact }}"
        K3S_URL: "https://{{ k3s_master_ip }}:{{ k3s_master_port }}"
        INSTALL_K3S_VERSION: "{{ k3s_version }}"
      register: k3s_agent_install
      when:
        - not k3s_agent_binary.stat.exists
        - k3s_agent_installed_version != k3s_version
      failed_when:
        - k3s_agent_install.rc != 0
        - '"already installed" not in k3s_agent_install.stderr'
      changed_when: k3s_agent_install.rc == 0

    - name: Wait for k3s-agent service to be ready
      ansible.builtin.systemd:
        name: k3s-agent
        state: started
        enabled: true
      register: k3s_agent_service
      until: k3s_agent_service.status.ActiveState == "active"
      retries: 5
      delay: 5

- name: Enabling Nodes
  hosts: michael-pi
  become: true
  tasks:
    - name: Sleep for 10 seconds
      ansible.builtin.wait_for:
        timeout: 10
    - name: Label worker nodes
      ansible.builtin.command: >
        kubectl label node {{ item.node }} kubernetes.io/role=worker
        location={{ item.location }} name={{ item.name }}
      changed_when: false
      with_items:
        - node: jim-pi
          location: home
          name: jim
        - node: stanley-arm1
          location: cloud
          name: stanley
        - node: phyllis-arm2
          location: cloud
          name: phyllis
        - node: angela-amd2
          location: cloud
          name: angela
        - node: toby-gcp1
          location: cloud
          name: toby
